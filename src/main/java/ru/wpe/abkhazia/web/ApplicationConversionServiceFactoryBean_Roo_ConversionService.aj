// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ru.wpe.abkhazia.web;

import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.core.convert.converter.Converter;
import org.springframework.format.FormatterRegistry;
import ru.wpe.abkhazia.domain.GeoPoint;
import ru.wpe.abkhazia.domain.Node;
import ru.wpe.abkhazia.domain.Region;
import ru.wpe.abkhazia.domain.Resource;
import ru.wpe.abkhazia.domain.Rewiev;
import ru.wpe.abkhazia.web.ApplicationConversionServiceFactoryBean;

privileged aspect ApplicationConversionServiceFactoryBean_Roo_ConversionService {

    declare @type: ApplicationConversionServiceFactoryBean: @Configurable;

    public Converter<Long, GeoPoint> ApplicationConversionServiceFactoryBean.getIdToGeoPointConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, ru.wpe.abkhazia.domain.GeoPoint>() {
            public ru.wpe.abkhazia.domain.GeoPoint convert(java.lang.Long id) {
                return GeoPoint.findGeoPoint(id);
            }
        };
    }

    public Converter<String, GeoPoint> ApplicationConversionServiceFactoryBean.getStringToGeoPointConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, ru.wpe.abkhazia.domain.GeoPoint>() {
            public ru.wpe.abkhazia.domain.GeoPoint convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), GeoPoint.class);
            }
        };
    }

    public Converter<Long, Node> ApplicationConversionServiceFactoryBean.getIdToNodeConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, ru.wpe.abkhazia.domain.Node>() {
            public ru.wpe.abkhazia.domain.Node convert(java.lang.Long id) {
                return Node.findNode(id);
            }
        };
    }

    public Converter<String, Node> ApplicationConversionServiceFactoryBean.getStringToNodeConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, ru.wpe.abkhazia.domain.Node>() {
            public ru.wpe.abkhazia.domain.Node convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), Node.class);
            }
        };
    }

    public Converter<Region, String> ApplicationConversionServiceFactoryBean.getRegionToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<ru.wpe.abkhazia.domain.Region, java.lang.String>() {
            public String convert(Region region) {
                return new StringBuilder().append(region.getName()).toString();
            }
        };
    }

    public Converter<Long, Region> ApplicationConversionServiceFactoryBean.getIdToRegionConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, ru.wpe.abkhazia.domain.Region>() {
            public ru.wpe.abkhazia.domain.Region convert(java.lang.Long id) {
                return Region.findRegion(id);
            }
        };
    }

    public Converter<String, Region> ApplicationConversionServiceFactoryBean.getStringToRegionConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, ru.wpe.abkhazia.domain.Region>() {
            public ru.wpe.abkhazia.domain.Region convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), Region.class);
            }
        };
    }

    public Converter<Long, Resource> ApplicationConversionServiceFactoryBean.getIdToResourceConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, ru.wpe.abkhazia.domain.Resource>() {
            public ru.wpe.abkhazia.domain.Resource convert(java.lang.Long id) {
                return Resource.findResource(id);
            }
        };
    }

    public Converter<String, Resource> ApplicationConversionServiceFactoryBean.getStringToResourceConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, ru.wpe.abkhazia.domain.Resource>() {
            public ru.wpe.abkhazia.domain.Resource convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), Resource.class);
            }
        };
    }

    public Converter<Long, Rewiev> ApplicationConversionServiceFactoryBean.getIdToRewievConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, ru.wpe.abkhazia.domain.Rewiev>() {
            public ru.wpe.abkhazia.domain.Rewiev convert(java.lang.Long id) {
                return Rewiev.findRewiev(id);
            }
        };
    }

    public Converter<String, Rewiev> ApplicationConversionServiceFactoryBean.getStringToRewievConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, ru.wpe.abkhazia.domain.Rewiev>() {
            public ru.wpe.abkhazia.domain.Rewiev convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), Rewiev.class);
            }
        };
    }

    public void ApplicationConversionServiceFactoryBean.installLabelConverters(FormatterRegistry registry) {
        registry.addConverter(getGeoPointToStringConverter());
        registry.addConverter(getIdToGeoPointConverter());
        registry.addConverter(getStringToGeoPointConverter());
        registry.addConverter(getNodeToStringConverter());
        registry.addConverter(getIdToNodeConverter());
        registry.addConverter(getStringToNodeConverter());
        registry.addConverter(getRegionToStringConverter());
        registry.addConverter(getIdToRegionConverter());
        registry.addConverter(getStringToRegionConverter());
        registry.addConverter(getResourceToStringConverter());
        registry.addConverter(getIdToResourceConverter());
        registry.addConverter(getStringToResourceConverter());
        registry.addConverter(getRewievToStringConverter());
        registry.addConverter(getIdToRewievConverter());
        registry.addConverter(getStringToRewievConverter());
    }

    public void ApplicationConversionServiceFactoryBean.afterPropertiesSet() {
        super.afterPropertiesSet();
        installLabelConverters(getObject());
    }

}
